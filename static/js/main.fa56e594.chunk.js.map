{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","typeOfDataForTheMap","setTypeOfDataForTheMap","data","setData","Date","selectedDate","setSelectedDate","useEffect","csv","then","filteredDataForMap","filter","d","toISOString","substr","listForMAxValue","map","Object","maxValue","Math","max","apply","colorScale","scaleLinear","domain","range","classes","makeStyles","theme","root","fontFamily","textAlign","flexGrow","justifyContent","fontSize","background","button","titleText","padding","spacing","color","palette","text","secondary","infoText","useStyles","Container","className","maxWidth","Paper","elevation","Grid","container","alignItems","item","xs","sm","md","lg","ToggleButtonGroup","orientation","value","exclusive","onChange","event","newTypeOfDataForTheMap","utils","DateFnsUtils","animateYearScrolling","minDate","disableFuture","disableToolbar","style","width","variant","format","margin","id","label","date","KeyboardButtonProps","ToggleButton","projectionConfig","rotate","scale","stroke","strokeWidth","length","geography","geographies","geo","find","s","iso_code","properties","ISO_A3","fill","rsmKey","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa56e594.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Grid, Paper, Container, makeStyles, Card } from \"@material-ui/core/\";\nimport { ToggleButton, ToggleButtonGroup } from \"@material-ui/lab/\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from \"@material-ui/pickers\";\nimport { csv } from \"d3-fetch\";\nimport { scaleLinear } from \"d3-scale\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Sphere,\n  Graticule,\n} from \"react-simple-maps\";\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst App = () => {\n  const [typeOfDataForTheMap, setTypeOfDataForTheMap] = useState(\"total_cases\");\n  const [data, setData] = useState([]);\n  const [selectedDate, setSelectedDate] = useState(\n    new Date(\"2020-04-17T21:11:54\")\n  );\n\n  useEffect(() => {\n    csv(\n      `https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv`\n    ).then((data) => {\n      setData(data);\n    });\n  }, [typeOfDataForTheMap]);\n\n  var filteredDataForMap = data.filter(function (d) {\n    if (\n      d[\"date\"] === selectedDate.toISOString().substr(0, 10) &&\n      d[\"iso_code\"] !== \"OWID_WRL\" &&\n      d[\"iso_code\"] !== \"OWID_HIC\" &&\n      d[\"iso_code\"] !== \"OWID_EUR\" &&\n      d[\"iso_code\"] !== \"OWID_EUN\" &&\n      d[\"iso_code\"] !== \"OWID_NAM\" &&\n      d[\"iso_code\"] !== \"OWID_UMC\"\n    ) {\n      return d;\n    }\n  });\n\n  const listForMAxValue = filteredDataForMap.map(\n    (Object) => Object[typeOfDataForTheMap]\n  );\n\n  var maxValue = Math.max.apply(Math, listForMAxValue);\n\n  // console.log(\"data\");\n  // console.log(data);\n  // console.log(\"filteredDataForMap\");\n  // console.log(filteredDataForMap);\n  // console.log(\"selectedDate\");\n  // console.log(selectedDate.toISOString().substr(0, 10));\n  // console.log(\"filteredDataForColorScale\");\n  // console.log(filteredDataForColorScale);\n  // console.log(\"listForMAxValue\");\n  // console.log(listForMAxValue);\n  // console.log(\"maxValue\");\n  // console.log(maxValue);\n\n  const handleDateChange = (date) => {\n    setSelectedDate(date);\n  };\n\n  const handleTypeOfDataForTheMap = (event, newTypeOfDataForTheMap) => {\n    if (newTypeOfDataForTheMap !== null) {\n      setTypeOfDataForTheMap(newTypeOfDataForTheMap);\n    }\n  };\n\n  const colorScale = scaleLinear()\n    .domain([0, maxValue])\n    .range([\"#ffedea\", \"#ff5233\"]);\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      fontFamily: \"Calibri\",\n      textAlign: \"center\",\n      flexGrow: 1,\n      justifyContent: \"space-evenly\",\n      fontSize: 50,\n      background: \"#FFFFF0\",\n    },\n    button: {\n      background: \"#F5F5DC\",\n    },\n    titleText: {\n      padding: theme.spacing(2),\n      textAlign: \"center\",\n      color: theme.palette.text.secondary,\n      background: \"#FFFACD\",\n    },\n    infoText: {\n      padding: theme.spacing(2),\n      textAlign: \"center\",\n      color: theme.palette.text.secondary,\n      background: \"#F5F5DC\",\n      fontSize: 22,\n    },\n  }));\n\n  const classes = useStyles();\n\n  return (\n    <Container className={classes.root} maxWidth=\"false\">\n      <Paper className={classes.titleText} elevation={3}>\n        COVID DATA ON MAP\n      </Paper>\n      <Paper className={classes.infoText} elevation={3}>\n        This is covid-19 data on map app. Choose the data and data you are\n        interested in. It will appear on the map.\n      </Paper>\n      <Grid container spacing={3} alignItems=\"center\">\n        <Grid item xs={12} sm={12} md={3} lg={3}>\n          {/* <p> {selectedDate.toISOString().substr(0, 10)} </p> */}\n          <ToggleButtonGroup\n            orientation=\"vertical\"\n            value={typeOfDataForTheMap}\n            exclusive\n            onChange={handleTypeOfDataForTheMap}\n            aria-label=\"text variable\"\n          >\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n              <KeyboardDatePicker\n                animateYearScrolling=\"true\"\n                minDate=\"2020-02-10\"\n                disableFuture\n                disableToolbar\n                style={{ width: 250 }}\n                variant=\"inline\"\n                format=\"MM/dd/yyyy\"\n                margin=\"normal\"\n                id=\"date-picker-inline\"\n                label=\"Pick a date\"\n                value={selectedDate}\n                onChange={handleDateChange}\n                KeyboardButtonProps={{\n                  \"aria-label\": \"change date\",\n                }}\n              />\n            </MuiPickersUtilsProvider>\n            <ToggleButton\n              style={{ width: 250 }}\n              value=\"total_cases\"\n              aria-label=\"left aligned\"\n              className={classes.button}\n            >\n              total cases\n            </ToggleButton>\n            <ToggleButton\n              style={{ width: 250 }}\n              value=\"total_deaths\"\n              aria-label=\"right aligned\"\n              className={classes.button}\n            >\n              total deaths\n            </ToggleButton>{\" \"}\n            <ToggleButton\n              style={{ width: 250 }}\n              value=\"total_cases_per_million\"\n              aria-label=\"right aligned\"\n              className={classes.button}\n            >\n              total cases per million\n            </ToggleButton>{\" \"}\n            <ToggleButton\n              style={{ width: 250 }}\n              value=\"total_deaths_per_million\"\n              aria-label=\"right aligned\"\n              className={classes.button}\n            >\n              total deaths per million\n            </ToggleButton>{\" \"}\n            <ToggleButton\n              style={{ width: 250 }}\n              value=\"hosp_patients\"\n              aria-label=\"right aligned\"\n              className={classes.button}\n            >\n              hospital patients\n            </ToggleButton>\n            <ToggleButton\n              style={{ width: 250 }}\n              value=\"total_tests\"\n              aria-label=\"right aligned\"\n              className={classes.button}\n            >\n              total tests\n            </ToggleButton>{\" \"}\n            <ToggleButton\n              style={{ width: 250 }}\n              value=\"total_vaccinations\"\n              aria-label=\"right aligned\"\n              className={classes.button}\n            >\n              total vaccinations\n            </ToggleButton>{\" \"}\n            <ToggleButton\n              style={{ width: 250 }}\n              value=\"people_fully_vaccinated\"\n              aria-label=\"right aligned\"\n              className={classes.button}\n            >\n              people fully vaccinated\n            </ToggleButton>\n            <ToggleButton\n              style={{ width: 250 }}\n              value=\"new_vaccinations\"\n              aria-label=\"right aligned\"\n              className={classes.button}\n            >\n              new vaccinations\n            </ToggleButton>{\" \"}\n            <ToggleButton\n              style={{ width: 250 }}\n              value=\"population\"\n              aria-label=\"right aligned\"\n              className={classes.button}\n            >\n              population\n            </ToggleButton>\n            <ToggleButton\n              style={{ width: 250 }}\n              value=\"population_density\"\n              aria-label=\"right aligned\"\n              className={classes.button}\n            >\n              population density\n            </ToggleButton>{\" \"}\n            <ToggleButton\n              style={{ width: 250 }}\n              value=\"median_age\"\n              aria-label=\"right aligned\"\n              className={classes.button}\n            >\n              median age\n            </ToggleButton>\n            <ToggleButton\n              style={{ width: 250 }}\n              value=\"gdp_per_capita\"\n              aria-label=\"right aligned\"\n              className={classes.button}\n            >\n              gdp per capita\n            </ToggleButton>{\" \"}\n            <ToggleButton\n              style={{ width: 250 }}\n              value=\"life_expectancy\"\n              aria-label=\"right aligned\"\n              className={classes.button}\n            >\n              life expectancy\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </Grid>\n        <Grid item xs={12} sm={12} md={9} lg={9}>\n          <ComposableMap\n            projectionConfig={{\n              rotate: [-10, 0, 0],\n              scale: 147,\n            }}\n          >\n            <Sphere stroke=\"#E4E5E6\" strokeWidth={0.8} />\n            <Graticule stroke=\"#E4E5E6\" strokeWidth={0.8} />\n            {filteredDataForMap.length > 0 && (\n              <Geographies geography={geoUrl}>\n                {({ geographies }) =>\n                  geographies.map((geo) => {\n                    const d = filteredDataForMap.find(\n                      (s) => s.iso_code === geo.properties.ISO_A3\n                    );\n                    return (\n                      <Geography\n                        key={geo.rsmKey}\n                        geography={geo}\n                        fill={\n                          d ? colorScale(d[typeOfDataForTheMap]) : \"#F5F4F6\"\n                        }\n                      />\n                    );\n                  })\n                }\n              </Geographies>\n            )}\n          </ComposableMap>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}